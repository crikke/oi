// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.4
// source: proto/server.proto

package server

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DatabaseManagerServiceClient is the client API for DatabaseManagerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DatabaseManagerServiceClient interface {
	CreateDatabase(ctx context.Context, in *CreateDatabaseRequest, opts ...grpc.CallOption) (*CreateDatabaseResponse, error)
	StopDatabase(ctx context.Context, in *StopDatabaseRequest, opts ...grpc.CallOption) (*StopDatabaseResponse, error)
	StartDatabase(ctx context.Context, in *StartDatabaseRequest, opts ...grpc.CallOption) (*StartDatabaseResponse, error)
}

type databaseManagerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDatabaseManagerServiceClient(cc grpc.ClientConnInterface) DatabaseManagerServiceClient {
	return &databaseManagerServiceClient{cc}
}

func (c *databaseManagerServiceClient) CreateDatabase(ctx context.Context, in *CreateDatabaseRequest, opts ...grpc.CallOption) (*CreateDatabaseResponse, error) {
	out := new(CreateDatabaseResponse)
	err := c.cc.Invoke(ctx, "/DatabaseManagerService/CreateDatabase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseManagerServiceClient) StopDatabase(ctx context.Context, in *StopDatabaseRequest, opts ...grpc.CallOption) (*StopDatabaseResponse, error) {
	out := new(StopDatabaseResponse)
	err := c.cc.Invoke(ctx, "/DatabaseManagerService/StopDatabase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseManagerServiceClient) StartDatabase(ctx context.Context, in *StartDatabaseRequest, opts ...grpc.CallOption) (*StartDatabaseResponse, error) {
	out := new(StartDatabaseResponse)
	err := c.cc.Invoke(ctx, "/DatabaseManagerService/StartDatabase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DatabaseManagerServiceServer is the server API for DatabaseManagerService service.
// All implementations must embed UnimplementedDatabaseManagerServiceServer
// for forward compatibility
type DatabaseManagerServiceServer interface {
	CreateDatabase(context.Context, *CreateDatabaseRequest) (*CreateDatabaseResponse, error)
	StopDatabase(context.Context, *StopDatabaseRequest) (*StopDatabaseResponse, error)
	StartDatabase(context.Context, *StartDatabaseRequest) (*StartDatabaseResponse, error)
	mustEmbedUnimplementedDatabaseManagerServiceServer()
}

// UnimplementedDatabaseManagerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDatabaseManagerServiceServer struct {
}

func (UnimplementedDatabaseManagerServiceServer) CreateDatabase(context.Context, *CreateDatabaseRequest) (*CreateDatabaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDatabase not implemented")
}
func (UnimplementedDatabaseManagerServiceServer) StopDatabase(context.Context, *StopDatabaseRequest) (*StopDatabaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopDatabase not implemented")
}
func (UnimplementedDatabaseManagerServiceServer) StartDatabase(context.Context, *StartDatabaseRequest) (*StartDatabaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartDatabase not implemented")
}
func (UnimplementedDatabaseManagerServiceServer) mustEmbedUnimplementedDatabaseManagerServiceServer() {
}

// UnsafeDatabaseManagerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DatabaseManagerServiceServer will
// result in compilation errors.
type UnsafeDatabaseManagerServiceServer interface {
	mustEmbedUnimplementedDatabaseManagerServiceServer()
}

func RegisterDatabaseManagerServiceServer(s grpc.ServiceRegistrar, srv DatabaseManagerServiceServer) {
	s.RegisterService(&DatabaseManagerService_ServiceDesc, srv)
}

func _DatabaseManagerService_CreateDatabase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDatabaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseManagerServiceServer).CreateDatabase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DatabaseManagerService/CreateDatabase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseManagerServiceServer).CreateDatabase(ctx, req.(*CreateDatabaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseManagerService_StopDatabase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopDatabaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseManagerServiceServer).StopDatabase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DatabaseManagerService/StopDatabase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseManagerServiceServer).StopDatabase(ctx, req.(*StopDatabaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseManagerService_StartDatabase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartDatabaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseManagerServiceServer).StartDatabase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DatabaseManagerService/StartDatabase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseManagerServiceServer).StartDatabase(ctx, req.(*StartDatabaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DatabaseManagerService_ServiceDesc is the grpc.ServiceDesc for DatabaseManagerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DatabaseManagerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "DatabaseManagerService",
	HandlerType: (*DatabaseManagerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDatabase",
			Handler:    _DatabaseManagerService_CreateDatabase_Handler,
		},
		{
			MethodName: "StopDatabase",
			Handler:    _DatabaseManagerService_StopDatabase_Handler,
		},
		{
			MethodName: "StartDatabase",
			Handler:    _DatabaseManagerService_StartDatabase_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/server.proto",
}
